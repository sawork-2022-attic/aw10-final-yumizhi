/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.micropos.carts.api;

import com.micropos.carts.dto.CartDto;
import com.micropos.carts.dto.ErrorDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-05T19:55:51.089017+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "cart", description = "the cart API")
public interface CartApi {

    /**
     * POST /cart/add/{productId} : Add an item to the cart
     *
     * @param productId The ID of the product to add to the cart (required)
     * @return A successful response (status code 200)
     *         or The request cannot be fulfilled due to bad syntax (status code 200)
     */
    @Operation(
        operationId = "addToCart",
        summary = "Add an item to the cart",
        tags = { "Cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A successful response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CartDto.class))),
            @ApiResponse(responseCode = "200", description = "The request cannot be fulfilled due to bad syntax", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cart/add/{productId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<CartDto>> addToCart(
        @Parameter(name = "productId", description = "The ID of the product to add to the cart", required = true, schema = @Schema(description = "")) @PathVariable("productId") String productId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 0 }, { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 0 } ] }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * POST /cart/checkout : Checkout the cart
     *
     * @return A successful response (status code 200)
     *         or The request cannot be fulfilled due to bad syntax (status code 200)
     */
    @Operation(
        operationId = "checkoutCart",
        summary = "Checkout the cart",
        tags = { "Cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A successful response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Long.class))),
            @ApiResponse(responseCode = "200", description = "The request cannot be fulfilled due to bad syntax", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cart/checkout",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Long>> checkoutCart(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /cart : List all items of the cart
     *
     * @return A successful response (status code 200)
     *         or The request cannot be fulfilled due to bad syntax (status code 200)
     */
    @Operation(
        operationId = "listCart",
        summary = "List all items of the cart",
        tags = { "Cart" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A successful response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CartDto.class))),
            @ApiResponse(responseCode = "200", description = "The request cannot be fulfilled due to bad syntax", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cart",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<CartDto>> listCart(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 0 }, { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 0 } ] }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
