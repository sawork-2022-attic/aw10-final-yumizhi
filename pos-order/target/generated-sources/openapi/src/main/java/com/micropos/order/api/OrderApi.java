/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.micropos.order.api;

import com.micropos.order.dto.ErrorDto;
import com.micropos.order.dto.OrderDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-05T19:55:53.406866500+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "order", description = "the order API")
public interface OrderApi {

    /**
     * POST /order : Create an order
     *
     * @param orderDto  (optional)
     * @return Order created (status code 200)
     *         or Invalid order (status code 400)
     */
    @Operation(
        operationId = "createOrder",
        summary = "Create an order",
        responses = {
            @ApiResponse(responseCode = "200", description = "Order created", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Long.class))),
            @ApiResponse(responseCode = "400", description = "Invalid order", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/order",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Long>> createOrder(
        @Parameter(name = "OrderDto", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) Mono<OrderDto> orderDto,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /order/{id} : Get an order
     *
     * @param id Order ID (required)
     * @return Order found (status code 200)
     *         or Order not found (status code 404)
     */
    @Operation(
        operationId = "getOrder",
        summary = "Get an order",
        responses = {
            @ApiResponse(responseCode = "200", description = "Order found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  OrderDto.class))),
            @ApiResponse(responseCode = "404", description = "Order not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/order/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<OrderDto>> getOrder(
        @Parameter(name = "id", description = "Order ID", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"total\" : 1.4658129805029452, \"id\" : 0, \"cart\" : { \"items\" : [ { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 6 }, { \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"quantity\" : 6 } ] } }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
